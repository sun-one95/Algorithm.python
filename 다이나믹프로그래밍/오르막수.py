"백준 11057"

"""
어떠한 수가 오름차순 즉 이전수보다 크거나 같다면 오르막 수라고 부를 수 있다.
자릿수 n이 1일 때 0~9의 수가 올 수 있는 경우의 수를 가진 이전 리스트를 활용하여 n이 커질 때 n-1의 리스트를 활용하여 규칙을 찾을 수 있다.
n과 끝의 수를 기준으로 표로 작성하자면

N\ 끝의 수  0   1   2   3   4   5   6   7   8   9
1         1   1   1   1   1   1   1   1   1   1
2         1   2   3   4   5   6   7   8   9   10 
3         1   3   6   10  15  21  28  36  45  55

이 표를 통해 끝의 수 i는 N - 1일 때 i에 i-1을 더하면 끝의 수가 i일 때 만들 수 있는 오르막 수의 개수를 구할 수 있다.
끝의 수 0~9까지 dp를 저장하는 리스트를 하나만 작성해도 이전 N - 1만 사용하기 때문에 괜찮다.
문제에서는 자릿수에 따른 오르막 수의 개수를 구하길 원하므로 이 dp를 더하고 10007로 나누어 출력하면 된다.


n = 3
dp = [1, 3, 6, 4, 5, 6, 7, 8, 9, 10]

i = 0일때,
j = 1
dp[1] += dp[0] = 2
j = 2
dp[2] += dp[1] = 3
j = 3
dp[3] += dp[2] = 4
j = 4
dp[4] += dp[3] = 5
j = 5
dp[5] += dp[4] = 6
j = 6
dp[6] += dp[5] = 7
j = 7
dp[7] += dp[6] = 8
j = 8
dp[8] += dp[7] = 9
j = 9
dp[9] += dp[8] = 10

dp = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]
i = 1일때,
j = 1
dp[1] += dp[0] = 3
i = 2
dp[2] += dp[1] = 6
i = 3
dp[3] += dp[2] = 10
"""

import sys
input = sys.stdin.readline

n = int(input())
dp = [1] * 10
for i in range(1, n):
    for j in range(1, 10):
        dp[j] += dp[j - 1]
        
print(sum(dp) % 10007)