'''
'가장 인접한 두 공유기 사이의 거리'의 최댓값을 탐색해야 하는 문제이다.
각 집의 좌표가 최대 10억(탐색범위)이므로, 이진 탐색을 이용하면 문제를 해결할 수 있다.
이진 탐색으로 '가장 인접한 두 공유기 사이의 거리'를 조절해가며, 매 순간 실제로 공유기를 설치하여 C보다 많이 개수로 공유기를 설치할 수 있는지 체크하여 문제를 해결할 수 있다.
다만, '가장 인접한 두 공유기 사이의 거리'의 최댓값을 찾아야 하므로, C보다 많은 개수로 공유기를 설치할 수 있다면 '가장 인접한 두 공유기 사이의 거리'이 값을 증가시켜서,
더 큰 값에 대해서도 성립하는지 체크하기 위해 다시 탐색을 수행한다.

이 문제는 집의 좌표가 n개 있을 때, 공유기 개수 c개를 설치할 수 있다.
그런데 설치한 공유기들 중 가장 인접한 두 공유기 상이의 거리를 최대로 하는 로직을 짜야한다.
이진법을 이용해서 풀려면, 설치할 수 있는 공유기 사이의 거리의 최솟값과 최댓값
(이 값은 쉽게 구할 수 있다. 최소점은 가장 좌표가 낮은 집들의 차이고, 최대점은 가장 좌표가 높은 집과 가장 낮은 집의 차이다.)
을 시작점과 끝점으로 지정하고, 이들의 중간값이 설치할 수 있는 두 공유기 사이의 거리라고 정한다.
그래서 반복문을 돌려서 첫 시작을 첫번째 좌표(arr[0])로 하여 이 값과 mid값을 더해서 그 이상의 좌표가 존재하면, 설치할 수 있다는 의미이다.(mid값이 설치한 공유기 사이의 거리 중에서 가장 최솟값이므로)
그렇게 해서 계속 반복문을 돌려서 위의 mid값 이상의 좌표를 첫시작으로 갱신하여 mid값 이상의 공유기를 설치할 수 있는 집의 좌표가 있는지 탐색한다.
있다면 카운팅한다. 결구, 그 카운팅한 총 개수가 c개 이상이라면 문제에서 요구하는 답에 적합하므로
결과값에 그 mid값을 할당한다.
만약 카운팅개수가 c개 미만이라면 mid값을 1씩 감소시켜 다시 탐색한다.
이 문제는 다시 생각해보면 n개의 집들중에 c개의 공유기를 설치하면, 설치한 집들의 거리가 다를 수도 있고 같을 수도 있다.
이렇게 n개의 집에서 c개를 설치한 후 발생하는 최소 인접거리들 중에서 가장 최댓값을 리턴하라는 의미이다.
(일단 문제 자체를 100프로 이해하지 못해서 이진탐색 접근을 아예 못했다.) 
그러므로 이진탐색유형의 특유의 mid값을 설치할 수 있는 공유기 사의 최소 거리라고 생각하는 것이다.
이 가정을 착안으로 문제를 해결해가야 쉽게 답을 찾을 수 있다.

해결하는데 어려웠던 점
일단 이진탐색으로 이 문제를 접근하는 게 어려웠고, 설치할 수 있는 공유기의 개수를 받고 설치하는 방법이 나는 일단 수기로 집 개수가 홀수인 경우, 띄엄띄엄 설치하여 
그 공유기를 설치한 집들 사이의 거리를 구하는 줄 알았다.
그게 아니라 설치할 수 있는 공유기들의 거리를 최대로 구하는 거였다.
그리고 이진탐색으로 설치할 수 있는 거리, 중간값안에 요소들이 들어가는 지 그리고 들어가면, 그 요소로 부터 거리를 더한 값에 다음 요소들이 들어가는 지 확인하는 문제였다.
전에 비슷환 문제를 푼 경험이 있지만, 아직은 바로바로 떠오르지 못하고 직관화 하지 못해 풀 수 없었다.
'''

# 집의 개수(n)와 공유기의 개수(C)를 입력받기
n, c = map(int, input().split(' '))

# 전체 집의 좌표 정보를 입력받기
arr = []
for i in range(n):
    arr.append(int(input()))
arr.sort() # 이진 탐색 수행을 위해 정렬 수행

start = arr[1] - arr[0] # 집의 좌표 중에 가장 작은 값
end = arr[-1] - arr[0] # 집의 좌표 중에 가장 큰 값
result = 0

while(start <= end):
    mid = (start + end) // 2 # mid는 가장 인접한 두 공유기 사이의 거리(gap)를 의미
    value = arr[0]
    count = 1
    # 현재의 mid값을 이용해 공유기를 설치
    for i in range(1, n): # 앞에서부터 차근차근 설치
        if arr[i] >= value + mid:
            value = arr[i]
            count += 1
    if count >= c: # c개 이상의 공유기를 설치할 수 있는 경우, 거리를 증가
        start = mid + 1
        result = mid # 최적의 결과를 저장
    else: # c개 이상으 ㅣ공유기를 설치할 수 없는 경우, 거리를 감소
        end = mid - 1

print(result)
